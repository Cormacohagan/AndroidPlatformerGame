package com.gamedev.techtronic.lunargame;

import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.util.Log;

import com.gamedev.techtronic.lunargame.gage.engine.ElapsedTime;
import com.gamedev.techtronic.lunargame.gage.engine.graphics.IGraphics2D;
import com.gamedev.techtronic.lunargame.gage.world.GameScreen;
import com.gamedev.techtronic.lunargame.gage.world.LayerViewport;
import com.gamedev.techtronic.lunargame.gage.world.ScreenViewport;
import com.gamedev.techtronic.lunargame.gageExtension.AnimatedSprite;

import java.util.List;
import java.util.regex.PatternSyntaxException;

public class DialogueBox extends AnimatedSprite implements Runnable {

    // there is no local update() method
    // gameScreen.update() should call superclass AnimatedSprite's update() method for updating the dialogue box's border animation
    // The dialogueThread running DialogueBox.run() handles updating the dialogue box's contents

    private boolean active; // determines whether dialogue box is visible & whether calls to update() do anything
    private String storedText, personSpeaking, fontName, borderName, soundName, dialogueID, debugText;  // holds the text parsed from the dialogue XML file
    private String [] displayText; // wordsToDisplay is storedText split up into one word per array subscript
    // displayText is the actual text that gets displayed in the dialogue
    private int vLine = 1; // represents what "line" or height to draw text into the dialogueBox
    private Rect dialogueRect; // boundary for drawn text to be checked against (so text doesn't trail out of the dialogue box)
    long lastUpdateOccuredTime, currentTime, textUpdateRate = 1000; //textUpdateRate is in ms, gets converted
    List<String> wordsToDisplay;
    GameScreen gameScreen;
    LayerViewport layerViewport; // used to edit dialogueRect's bounds consistently (regardless of how zoomed in the viewport is)
    Paint paint;
    Typeface customFont;


    public DialogueBox (float x, float y, Bitmap borderBitmap, GameScreen gameScreen,
                        String animationName, Boolean isLooping, LayerViewport layerViewport) {
        super(x, y, borderBitmap, gameScreen, animationName, isLooping);
        this.layerViewport = layerViewport;
        this.gameScreen = gameScreen;


        // dialogue box is inactive and invisible the DialogueBox instance receives text to display
        active = false;

        // creating a rectangle that corresponds exactly to the dialogue box's sprite (and trimmed down on each side
        // this rectangle is used to evaluate where text should be drawn, should a new line be taken, etc
        dialogueRect = new Rect((int) (mBound.getLeft() /*+ layerViewport.getWidth()/50*/),
                (int) (mBound.getTop()/*+ layerViewport.getHeight()/50*/), (int) (mBound.getRight() /*- layerViewport.getWidth()/50*/),
                (int) (mBound.getBottom() /*- layerViewport.getHeight()/50*/));

        // set text size according to device stats


        paint = new Paint();
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.BLACK);
        paint.setTextSize(40);

    }

    // Called when we want a dialogue box to appear on screen. Receives an ID for what dialogue to display,
    // parses XML and retrieves dialogue, and splits up the dialogue into an arraylist (one word per subscript)
    // Caller should start a thread so DialogueBox.run() can update it's contents regularly.
    // (boolean active is set to true, allowing run() to work. If it's ever set to false, dialogue box will disappear
    public void activateDialogueBox(String dialogueID) {

        // parsing XML (yanked from Ciaran's AnimatedSprite class)
        // looks through all "id" attributes in txt/dialogueText, if any id = the arg dialogueID..
        // all of the necessary info for this piece of dialogue is taken from the XML file

        /* temporary xml parsing comment out
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            FileIO f = new FileIO(mGameScreen.getGame().getActivity());

            Document doc = builder.parse(f.readAsset("xml/dialogueText"));

            XPath xPath = XPathFactory.newInstance().newXPath();

            String expression = "/Dialogues/Dialogue";

            NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);

            for (int i = 0; i < nodeList.getLength(); i++) {
                Node nNode = nodeList.item(i);
                if (((Element) nNode).getAttribute("id").equalsIgnoreCase(dialogueID)){
                    // if any of the stored IDs equal the one received in this method..

                    // store relevant attributes in dialoguebox's variables
                    debugText = "yeah";
                    storedText = ((Element) nNode).getAttribute("text");
                    personSpeaking = ((Element) nNode).getAttribute("personSpeaking");
                    fontName = ((Element) nNode).getAttribute("font");
                    borderName = ((Element) nNode).getAttribute("bitmapToDisplay");
                    soundName = ((Element) nNode).getAttribute("soundToPlay");


                    break;
                }
            }

        }
        catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
         temporary xml parsing comment out*/
        // end of XML parsing

        // splitting the text taken from xml file into an arraylist of strings
        // (1 word per subscript, split when space is encountered)
        try{
            storedText = "jj";

            Log.d("rect debug", "" + dialogueRect.toString());

        }
        catch(PatternSyntaxException e) {
            e.printStackTrace();
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            Log.d("debug xml parsing wwwww", storedText + "g");
            Log.d("debug xml parsing wwwww", personSpeaking + "g");
            Log.d("debug xml parsing wwwww", debugText + "g");
        }

        active = true;
        lastUpdateOccuredTime = System.nanoTime();

    }

    public void run() {

        while (active) {
/*


            */
/* (removed)            currentTime = System.nanoTime();
            if (currentTime - lastUpdateOccuredTime / 1000000 >= 1000000000) {
                Log.d("thread debug", ""+lastUpdateOccuredTime);
                lastUpdateOccuredTime = System.nanoTime();

                try {
                    Thread.sleep(500);
                }
                catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }*//*




            //(removed)if (lastUpdateOccuredTime - currentTime / 1000000.0 >= textUpdateRate) { // if it's time to update the dialogue box's contents..

                if (wordsToDisplay.get(0).isEmpty()) { // if there's no characters left to print in the word we're working with..
                    // add a space to the end of displayText[vLine]
                    wordsToDisplay.remove(0);

                    if (wordsToDisplay.isEmpty()) { // if there's no words left to display in wordsToDisplay[] at all
                        // Thread.wait (need object lock), touch event notifies this thread
                            // use a matrix to fade opacity to 0
                            // active = false, thread.exit
                    }
                    else { // there are still words left to display for our dialogue, so..

                        //      check wordsToDisplay[0] can fit on current line vLine
                        //          if it can fit,
                        //              addNextCharacter()
                        //          if it can't fit
                        //              if vLine <=vLineMax
                        //                  vLine+=1
                        //                  addNextCharacter()
                        //              else
                        //                  set flashing triangle to visible to indicate to user to touch screen
                        //                  stop all text updating and wait for user input (thread.sleep indefinitely or else get lock and wait til notified)
                    }

                }
                else { // if there's still characters left to print in the word we're working with..

                    // addNextCharacter()

                }
*/

        }
        //(removed)     else { // if 100ms hasn't passed yet, don't do anything, just loop around until 100ms has passed
        //}

        // exit thread

    }


/* temp removed. will be called in gamescreen's draw()
    public void draw(ElapsedTime elapsedTime, IGraphics2D graphics2D) {
        if (active == true) {

        }

    */

    public void addNextCharacter () {

//displayText[vLine] += wordsToDisplay.get(0).charAt(0);
        //              add wordsToDisplay[0].charAt[0] to displayText[vLine]
        //              if (wordsToDisplay[0].charAt[0] is a comma,
        //                  Thread.sleep(textUpdateRate*2);
        //              else if(wordToDisplay[0].charAt[0] is a full stop,
        //                  Thread.sleep(textUpdateRate*3);
        //              else
        //                  Thread.sleep(textUpdateRate);
        //              remove wordsToDisplay[0].charAt[0] from wordsToDisplay[0]


        //wordsToDisplay.set(0, wordsToDisplay.get(0).substring(1));

    }

    public void draw (ElapsedTime elapsedTime, IGraphics2D graphics2D, LayerViewport layerViewport, ScreenViewport screenViewport) {
        super.draw(elapsedTime, graphics2D, layerViewport, screenViewport);
        graphics2D.drawText("test", 100, 100, paint);

    }

    // measured in ms, will be called by options screen to change rate text is drawn into dialogue box
    public void setTextUpdateRate(int textUpdateRate) {
        this.textUpdateRate = textUpdateRate;
    }

    //include .ttf when calling setFont()
    public void setFont(String fontName) {
        customFont = Typeface.createFromFile("fonts/" + fontName);
        paint.setTypeface(customFont);
    }
}
