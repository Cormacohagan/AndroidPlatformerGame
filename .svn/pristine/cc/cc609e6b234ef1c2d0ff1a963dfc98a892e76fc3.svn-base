package com.gamedev.techtronic.lunargame.Character;

import android.graphics.Bitmap;

import com.gamedev.techtronic.lunargame.Level.Tile;
import com.gamedev.techtronic.lunargame.gage.engine.ElapsedTime;
import com.gamedev.techtronic.lunargame.gage.world.GameObject;
import com.gamedev.techtronic.lunargame.gage.world.GameScreen;
import com.gamedev.techtronic.lunargame.gageExtension.AnimatedSprite;

public abstract class Character extends AnimatedSprite {

    public GameObject customCollisionBox;
    public int health, damage;
    public boolean isJumping = false;
    public boolean canJump = true;
    // protected float gravity = 15, velocity = 0, terminalVelocity = 30;


    public Character(float x, float y, Bitmap bitmap, GameScreen gameScreen, String animationName, Boolean isLooping) {
        super(x, y, bitmap, gameScreen, animationName, isLooping);

        // Player bitmap used as a null place holder, since gameObject expects a bitmap but it doesn't need to get drawn
        customCollisionBox = new GameObject(x, y, gameScreen.getGame().getAssetManager().getBitmap("player"), gameScreen);
        customCollisionBox.getBound().halfWidth= (this.mCurrentAnimation.getSpriteWidth()/2);
        customCollisionBox.getBound().halfHeight= this.mCurrentAnimation.getSpriteHeight()/2;
    }

    public boolean isDead() {
        return(health<=0);
    }

    // taken from Jack's original method in player class
    public void takeDamage (int damage) {
        health = (damage >= health) ? 0 : health - damage;
    }

    public void die(String animationName) {
        // play it's death animation (no loop), remove it's collision box, lies in background
    }

    public void moveLeft(int amount){
        position.x-= amount;
    }

    public void moveRight (int amount) { position.x+=amount; }

    public void jump (float velocity) {
        if (canJump) {
            isJumping = true;
            canJump = false;
            this.velocity.y = velocity;
        }
    }

    public void resolveCollision(Tile tile) {
        // check type of tile using instanceOf and act accordingly

    }

    // subclasses should override this method and call super.update() to ensure AnimatedSprite.update()
    // executes (so that animations occur)
    public void update(ElapsedTime elapsedTime) {

        this.position.x = customCollisionBox.position.x;
        this.position.y = customCollisionBox.position.y;
        super.update(elapsedTime);
        customCollisionBox.position.x = this.position.x;
        customCollisionBox.position.y = this.position.y;

        if (isJumping) {
            this.accelerate(elapsedTime.stepTime);
        }
    }

    public void accelerate(double time) {
        this.velocity.y = this.velocity.y + (-50 * (float) time);
    }

}
