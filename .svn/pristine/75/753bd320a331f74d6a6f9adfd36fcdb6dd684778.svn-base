package com.gamedev.techtronic.lunargame.gage.world;

import com.gamedev.techtronic.lunargame.gage.Game;
import com.gamedev.techtronic.lunargame.gage.engine.AssetStore;
import com.gamedev.techtronic.lunargame.gage.engine.ElapsedTime;
import com.gamedev.techtronic.lunargame.gage.engine.graphics.IGraphics2D;

/**
 * Game screen class acting as a container for a coherent section of the game (a
 * level, configuration screen, etc.).
 * 
 * @version 1.0
 */
public abstract class GameScreen {

	// /////////////////////////////////////////////////////////////////////////
	// Properties
	// /////////////////////////////////////////////////////////////////////////

	protected AssetStore mAssetManager;
	protected ScreenViewport mScreenViewport;
	protected LayerViewport mLayerViewport;
	protected float viewportRatio;
	protected float layerViewportX;
	protected float layerViewportSize;
	/**
	 * Name that is given to this game screen
	 */
	protected final String mName;

	/**
	 * Return the name of this game screen
	 * 
	 * @return Name of this game screen
	 */
	public String getName() {
		return mName;
	}

	/**
	 * Game to which game screen belongs
	 */
	protected final Game mGame;

	/**
	 * Return the game to which this game screen is attached
	 * 
	 * @return Game to which screen is attached
	 */

	public Game getGame() {
		return mGame;
	}

	// /////////////////////////////////////////////////////////////////////////
	// Constructors
	// /////////////////////////////////////////////////////////////////////////

	/**
	 * Create a new game screen associated with the specified game instance
	 * 
	 * @param game
	 *            Game instance to which the game screen belongs
	 */
	public GameScreen(String name, Game game) {
		mName = name;
		mGame = game;
	}

	// /////////////////////////////////////////////////////////////////////////
	// Update and Draw
	// /////////////////////////////////////////////////////////////////////////

	/**
	 * Update the game screen. Invoked automatically from the game.
	 * 
	 * NOTE: If the update is multi-threaded control should not be returned from
	 * the update call until all update processes have completed.
	 * 
	 * @param elapsedTime
	 *            Elapsed time information for the frame
	 */
	public abstract void update(ElapsedTime elapsedTime);

	/**
	 * Draw the game screen. Invoked automatically from the game.
	 * 
	 * @param elapsedTime
	 *            Elapsed time information for the frame
	 * @param graphics2D
	 *            Graphics instance used to draw the screen
	 */
	public abstract void draw(ElapsedTime elapsedTime, IGraphics2D graphics2D);

	// /////////////////////////////////////////////////////////////////////////
	// Android Life Cycle
	// /////////////////////////////////////////////////////////////////////////

	/**
	 * Invoked automatically by the game whenever the app is paused.
	 */
	public void pause() {
	}

	/**
	 * Invoked automatically by the game whenever the app is resumed.
	 */
	public void resume() {
	}

	/**
	 * Invoked automatically by the game whenever the app is disposed.
	 */
	public void dispose() {
	}

	protected void initAssets() {
		mAssetManager = mGame.getAssetManager();
		this.initBitmaps();
		this.initSounds();
	}

	protected abstract void initBitmaps();

	protected abstract void initSounds();

	protected abstract void addComponents();

	//Initialise the screen/layer viewports
	protected void initViewports(float layerViewportX, float layerViewportSize) {
		this.layerViewportX = layerViewportX;
		this.layerViewportSize = layerViewportSize;
		//Create a screen viewport with the width and height of the game screen
		mScreenViewport = new ScreenViewport(0, 0, mGame.getScreenWidth(), mGame.getScreenHeight());

		viewportRatio = (float) mScreenViewport.height / mScreenViewport.width;

		if (mScreenViewport.width > mScreenViewport.height) {
			mLayerViewport = new LayerViewport(layerViewportX, layerViewportX * viewportRatio, layerViewportSize, layerViewportSize * viewportRatio);
		} else {
			mLayerViewport = new LayerViewport(layerViewportX * viewportRatio, layerViewportX, layerViewportSize * viewportRatio, layerViewportSize);
		}
	}
}